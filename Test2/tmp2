#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>
#include <elf.h>
#include <linux/limits.h>

#include <sys/types.h>
#include <sys/wait.h>
#include <sys/user.h>
#include <sys/stat.h>
#include <sys/ptrace.h>
#include <sys/mman.h>

#define LONGSIZE  sizeof(long)

int status;

// 5. 目标进程继续运行
void continue_process(pid_t target_pid) {
    if ((ptrace(PTRACE_CONT, target_pid, NULL, NULL)) < 0) {
        perror("ptrace(DETACH):");
        exit(1);
    }
}

void getdata(pid_t target_pid, unsigned long addr, uint8_t *dst, unsigned long len) {
    union {
        long val;
        uint8_t bytes[LONGSIZE];
    } data;
    unsigned long i = 0;
    unsigned long j = len / LONGSIZE;
    uint8_t *laddr = dst;
    while (i < j) {
        data.val = ptrace(PTRACE_PEEKDATA, target_pid, addr + (i * LONGSIZE), NULL);
        memcpy(laddr, data.bytes, LONGSIZE);
        ++i;
        laddr += LONGSIZE;
    }

    unsigned long remainder = len % LONGSIZE;
    if (remainder != 0) { // save the remainder, which less than LONGSIZE
        data.val = ptrace(PTRACE_PEEKDATA, target_pid, addr + (i * LONGSIZE), NULL);
        memcpy(laddr, data.bytes, remainder);
    }
}


// 3. write data into memory
int write_data(pid_t pid, void *src, unsigned long *dst, unsigned long len) {
    unsigned long *s = (unsigned long *) src;
    unsigned long *d = dst;

    unsigned long step = sizeof(unsigned long);
    for (unsigned long i = 0; i < len; i += step, s++, d++) {
        if ((ptrace(PTRACE_POKETEXT, pid, d, *s)) < 0) {
            perror("ptrace(POKETEXT):");
            return -1;
        }
    }
    puts("inject success!");
    return 0;
}

// 1. 附加到正在运行的进程
int attach_process(pid_t target_pid) {
    printf("+ Tracing process %d\n", target_pid);
    if ((ptrace(PTRACE_ATTACH, target_pid, NULL, NULL)) < 0) {
        perror("ptrace(ATTACH):");
        exit(-1);
    }
    printf("+ Waiting for process...\n");
    wait(&status);

    return 0;
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage:\n\t%s pid\n", argv[0]);
        exit(1);
    }
    pid_t target_pid = atoi(argv[1]);
    printf("%s %d\n", __FUNCTION__, __LINE__);
    attach_process(target_pid);
    printf("%s %d\n", __FUNCTION__, __LINE__);
    long trap, orig;
    struct user_regs_struct pt_reg;
    unsigned long p1 = 0x401d35;
    unsigned long p2 = 0x401d4c;

    orig = ptrace(PTRACE_PEEKTEXT, target_pid, p1, NULL);
    printf("orig = %lx\n", orig);

    trap = (orig & ~0xff) | 0xcc;
    if ((ptrace(PTRACE_POKETEXT, target_pid, p1, trap)) < 0) {
        perror("ptrace(PRETEXT):");
        return -1;
    }

    trace:
    /* 重启已终止的被追踪进程 */
    if (ptrace(PTRACE_CONT, target_pid, NULL, NULL) < 0) {
        perror("PTRACE_CONT");
        exit(-1);
    }

    wait(&status);

    if (WIFSTOPPED(status) && WSTOPSIG(status) == SIGTRAP) {
        /* 获取寄存器内容 */
        if (ptrace(PTRACE_GETREGS, target_pid, NULL, &pt_reg) < 0) {
            perror("PTRACE_GETREGS");
            exit(-1);
        }
        printf("\nPlease hit any key to continue: ");
        getchar();

        /* 还原print_string中的第一条指令内容 */
        if (ptrace(PTRACE_POKETEXT, target_pid, p1, orig) < 0) {
            perror("PTRACE_POKETEXT");
            exit(-1);
        }

        /* 将指令指针-1，即从print_string的第一条指令开始执行 */
        pt_reg.rip = pt_reg.rip - 1;

        /* 设置寄存器内容 */
        if (ptrace(PTRACE_SETREGS, target_pid, NULL, pt_reg) < 0) {
            perror("PTRACE_SETREGS");
            exit(-1);
        }

        /* 设置进程执行一条指令后切换到终止状态 */
        if (ptrace(PTRACE_SINGLESTEP, target_pid, NULL, NULL) < 0) {
            perror("PTRACE_SINGLESTEP");
            exit(-1);
        }

        wait(NULL);

        /* 继续设置断点 */
        if (ptrace(PTRACE_POKETEXT, target_pid, p1, trap) < 0) {
            perror("PTRACE_POKETEXT");
            exit(-1);
        }
    }

    getchar();
    continue_process(target_pid);
    return 0;
}
